# Punteros especiales en Rust
[Tabla de Contenido](toc/spanish.html)

---

Rust ofrece diferentes punteros especiales para manejar distintos escenarios.

Todos ellos tienen algo en común: Todos son manejados mediante "ownership".

---

## `std::rc::Rc<T>`

Conteo de referencias en tiempo de ejecución dentro de un thread.

<pre><code data-source="chapters/shared/code/smart-pointers/1.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Semántica

-   `Rc` es un manejador en el dato contenido
-   El manejador puede ser clonado.
-   Si el ultimo manejador cae, tambien el dato lo hace.
-   `Rc<T>` implementa `Deref<Target=T>`

---

## `std::rc::Weak<T>`

Puntero débil a un dato.

<pre><code data-source="chapters/shared/code/smart-pointers/2.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Semántica

-   Es similar a `Rc`, sin embargo la existencia de los datos no es garantizada
-   Un sólo thread: El dato es garantizado para estar disponible durante el tiempo de la operación
-   *No* es automáticamente des reverenciado
-   `Rc` circulares son fugas de memoria, los punteros débiles previenen eso

---

## Uso

-   Frecuentemente es usando en estructuras de datos que requieren referencias cruzadas
-   Altos costos de tiempo de ejecución para mayor flexibilidad

---

## `std::sync::Arc<T>`

Un `Rc` más caro que trabaja a través de los límites de threads ya que un contador atómico es utilizado para incrementar las referencias.

---

## Observaciones

No utilice `Arc` en una corazonada. `rustc` rechaza codigo usando `Rc` a través de los límites de un thread.

---

## `std::borrow::Cow`

-   Copia-al-escribir
-   Abstrae por encima de préstamo y propiedad (Borrowing and Ownership)
-   Clona datos sólo cuando es necesario
-   https://doc.rust-lang.org/std/borrow/enum.Cow.html#examples

