# Überblick
[Inhaltsverzeichnis](toc/default.html)

---

## Ein wenig Geschichte

Rust
-   wurde 2009 erfunden.
-   ist ein Experimentalprojekt von Graydon Hoare.
-   wurde von Mozilla adoptiert.
-   Version 0.4 wurde 2012 der Öffentlichkeit vorgestellt.
-   war anfangs ein wenig Go-like.

---

## Fokussierung

Rust hat von 2012 bis 2014 stark an Features verloren:
-   Garbage Collector
-   Evented Runtime
-   komplexes Error-handling
-   war alles mal da, ist heute nicht mehr

→  Orientierung zu einer verwendbaren Systemsprache

---

## Entwicklung

-   war immer von einem Großprojekt (z.B. Servo) begleitet.
-   Auch in Frühzeiten mit regelmässigen Releases, Deprecations, RFCs.
-   Gute praktische Softwareentwicklung.

---

## Release-Modus

-   nächtliche Releases
-   Alle 6 Wochen wird der aktuelle Stand zu einem Beta-Release.
-   Nach 6 Wochen Testing wird Beta zu Stable.
-   bietet garantierte Rückwärtskompatibilität
-   Erleichtert durch kleinere Iterationen

---

## Ziele

-   Explizit über implizit
-   vorhersagbares Laufzeitverhalten
-   Stabile Softwareentwicklung in großen Projekten
-   Pragmatismus und Integrierbarkeit
-   Zugängliches Projekt

---

## Rust möchte zuallererst verwendbar sein

---

## Anmerkung

Viele Beispiele in diesem Kurs sind sehr klein, daher werden wir immer auch etwas die Auswirkungen in großen Projekten diskutieren.

---

## Die drei Worte

-   Sicher
-   Nebenläufig
-   Schnell

---

## Sicher

-   Rust ist speichersicher
-   Keine illegalen Speicherzugriffe
-   Speicherbereinigung ist automatisiert
-   Achtung: Speicherlecks sind in dieser Definition *sicher*!

---

## Nebenläufig

-   "Nebenläufigkeit ohne Angst"
-   Typsystem erkennt konkurrierenden Zugriff auf Daten und verlangt Synchronisierung
-   Umgekehrt: Rust erkennt, wenn unsynchronisierter Zugriff möglich ist!
-   Schutz vor Daten-Races

---

## Schnell

-   Die zuvor genannten Eigenschaften werden zur Kompilierzeit garantiert und haben keine Laufzeitkosten!
-   Optimierender Compiler basierend auf LLVM
-   Features mit Laufzeitkosten sind explizit und werden nicht "aus Versehen" aktiviert
-   Keine Reflektion (Vampirsprache)
-   Statische Aufrufe als Standard

---

## Pragmatisch

-   Subsprache für unsichere Speicherzugriffe
-   gute Techniken zum verstecken dieser
-   gute Einbindung über das Platform-FFI
-   Sehr gute Fehlermeldungen.
-   Rust unterstützt bei vielen Schwierigkeiten und vertraut einem beim Rest.

---

## Spracheigenschaften

-   Rust basiert auf Ausdrücken. Jeder Ausdruck hat einen Wert, dieser kann zugewiesen oder zurück gegeben werden.
-   "Pay what you use": Rust bietet zur Laufzeit teure Features an: Explizit und direkt sichtbar. Nicht verwendete Features kosten nichts.

---

## Woher kommen Rustaceans?

Interessanterweise in etwa gleich von:

-   dynamischen Sprachen (Rubyisten und Pythonista)
-   funktionalen Sprachen wie Scala und Haskell
-   C/C++

---

## Bekannte User

-   Mozilla Firefox
-   Mozilla Servo
-   Gnome
-   Dropbox
-   [Rust Friends](http://rust-lang.org/friends.html)
